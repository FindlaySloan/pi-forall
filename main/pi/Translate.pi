module Translate where

data Maybe (A : Type) : Type where
   Nothing
   Just of (A)
{--
g : Bool -> Bool -> Bool
g = \a b . case a of
    True -> case b of
                True -> True
                False -> False
    False -> False
--}
f : Maybe Char -> Bool
f = \b . case b of
           Nothing  -> False
           Just n   -> True
{--
--id : Char -> Char -> Char
--id = \a b.  a

data Nati : Type where
  Zeroi
  Succi of (Nati)

show : Nati -> Char
show = \s . case s of
    Zeroi -> '0'
    Succi n -> '1'

pred : Nati -> Char
pred = \n . case n of
  Zeroi -> show Zeroi
  Succi nn -> show nn
--}

-- doSomething : Nat -> Nat -> Nat
-- doSomething = \a b . 7
