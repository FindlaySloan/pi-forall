doSomething : Char -> Char -> Char
doSomething = \ a b . a

Module {
	moduleName = "Translate",
	moduleImports = [],
	moduleEntries = [
		TypeSig (Sig {
			sigName = doSomething,
			sigEp = Rel,
			sigType = Pos "Translate.pi" (line 3, column 15) (Pi Rel TyChar (<_> Pi Rel TyChar (<_1> TyChar)))}),
		Def doSomething (Pos "Translate.pi" (line 4, column 15)
			(Lam Rel (<a>
				Lam Rel (<b>
					Pos "Translate.pi" (line 4, column 23) (Var 1@0)))))
	],
	moduleConstructors = ConstructorNames {
		tconNames = fromList ["Bool","List","Sigma","Unit"],
		dconNames = fromList ["()","Cons","False","Nil","Prod","True"]
		}
	}


doSomething : Char -> Char -> Char
doSomething = \ a b . ((\c . c) : Char -> Char) 'a'

Module {
	moduleName = "Translate",
	moduleImports = [],
	moduleEntries = [
		TypeSig (Sig {
			sigName = doSomething,
			sigEp = Rel,
			sigType = Pos "Translate.pi" (line 3, column 15) (Pi Rel (TCon "List" [Arg {argEp = Rel, unArg = TyChar}]) (<_> Pi Rel TyChar (<_1> TyChar)))
			}),
		Def doSomething (Pos "Translate.pi" (line 4, column 15)
			(Lam Rel (<a>
				Lam Rel (<b>
					Pos "Translate.pi" (line 4, column 23) (Pos "Translate.pi" (line 4, column 24)
						(App
							(Ann
								(Pos "Translate.pi" (line 4, column 26)
									(Lam Rel (<c>
										Pos "Translate.pi" (line 4, column 30) (Var 0@0))))
								(Pos "Translate.pi" (line 4, column 35) (Pi Rel TyChar (<_4> TyChar))))
							(Arg {argEp = Rel, unArg = LitChar 'a'})))
					)
				)
			))],
	moduleConstructors = ConstructorNames {tconNames = fromList ["Bool","List","Sigma","Unit"], dconNames = fromList ["()","Cons","False","Nil","Prod","True"]}}

id : Char -> Char
id = \a . a

doSomething : Char -> Char -> Char
doSomething = \ a b .  id a

Module {
    moduleName = "Translate",
    moduleImports = [],
    moduleEntries = [
        TypeSig (Sig {
            sigName = id,
            sigEp = Rel,
            sigType = Pos "Translate.pi" (line 3, column 6) (Pi Rel TyChar (<_> TyChar))
        }),
        Def id (Pos "Translate.pi" (line 4, column 6)
            (Lam Rel (<a>
                Pos "Translate.pi" (line 4, column 11) (Var 0@0)))
        ),
        TypeSig (Sig {
            sigName = doSomething,
            sigEp = Rel,
            sigType = Pos "Translate.pi" (line 6, column 15) (Pi Rel TyChar (<_1> Pi Rel TyChar (<_2> TyChar)))
        }),
        Def doSomething (Pos "Translate.pi" (line 7, column 15)
            (Lam Rel (<a>
                Lam Rel (<b>
                    Pos "Translate.pi" (line 7, column 24)
                        (App
                            (App
                                (Var id)
                                (Arg {argEp = Rel, unArg = Var 1@0})
                            )
                            (Arg {argEp = Rel, unArg = Var 0@0})
                        )))))],
    moduleConstructors = ConstructorNames {tconNames = fromList ["Bool","List","Sigma","Unit"], dconNames = fromList ["()","Cons","False","Nil","Prod","True"]}}

-- Done
id : Char -> Char -> Char
id = \a b .  a

doSomething : Char -> Char -> Char
doSomething = \ a b .  id a b



data Nat : Type where
  Zero
  Succ of (Nat)

Module {
    moduleName = "Translate",
    moduleImports = [],
    moduleEntries = [
        Data "Nat" (Telescope []) [
            ConstructorDef "pi/Translate.pi" (line 7, column 3) "Zero" (Telescope []),
            ConstructorDef "pi/Translate.pi" (line 8, column 3) "Succ" (Telescope [TypeSig (Sig {sigName = _, sigEp = Rel, sigType = Pos "pi/Translate.pi" (line 8, column 12) (TCon "Nat" [])})])
        ]],
    moduleConstructors = ConstructorNames {tconNames = fromList ["Bool","List","Nat","Sigma","Unit"],
    dconNames = fromList ["()","Cons","False","Nil","Prod","Succ","True","Zero"]}}



------

data Nati : Type where
  Zero
  Succ of (Nati)


pred : Nati -> Nati
pred = \n . case n of
  Zero -> Zero
  Succ n' -> n'

Module {
    moduleName = "Translate",
    moduleImports = [],
    moduleEntries = [
        Data "Nati" (Telescope []) [
            ConstructorDef "pi/Translate.pi" (line 7, column 3) "Zero" (Telescope []),
            ConstructorDef "pi/Translate.pi" (line 8, column 3) "Succ" (Telescope [
                TypeSig (Sig {sigName = _, sigEp = Rel, sigType = Pos "pi/Translate.pi" (line 8, column 12) (TCon "Nati" [])})]
                )],
            TypeSig (Sig {sigName = pred, sigEp = Rel, sigType = Pos "pi/Translate.pi" (line 11, column 8) (Pi Rel (TCon "Nati" []) (<_1> TCon "Nati" []))}),
            Def pred (Pos "pi/Translate.pi" (line 12, column 8) (Lam Rel (<n>
                Pos "pi/Translate.pi" (line 12, column 13) (Case
                    (Pos "pi/Translate.pi" (line 12, column 18) (Pos "pi/Translate.pi" (line 12, column 18) (Var 0@0)))
                    [Match (<(PatCon "Zero" [])> Pos "pi/Translate.pi" (line 13, column 11) (Pos "pi/Translate.pi" (line 13, column 11)
                        (DCon "Zero" []))),
                     Match (<(PatCon "Succ" [(PatVar n',Rel)])> Pos "pi/Translate.pi" (line 14, column 14) (Pos "pi/Translate.pi" (line 14, column 14) (Var 0@0)))])))
                     )],
            moduleConstructors = ConstructorNames {tconNames = fromList ["Bool","List","Nat","Nati","Sigma","Unit"],
            dconNames = fromList ["()","Cons","False","Nil","Prod","Succ","True","Zero"]}}

-------

Def main (App (Var head)
              (Arg {argEp = Rel, unArg =
              DCon "Cons" [
                Arg {argEp = Rel, unArg = (LitChar 'a')},
                Arg {argEp = Rel, unArg =
                    DCon "Cons" [
                        Arg {argEp = Rel, unArg =  (LitChar 'b')},
                        Arg {argEp = Rel, unArg = DCon "Nil" []}]}]})),


[
TyChar,
(Pi Rel (TCon "List" [Arg {argEp = Rel, unArg = TyChar}]) (<_> TyChar)),
TCon "List" [Arg {argEp = Rel, unArg = TyChar}],
TyChar,
TCon "List" [Arg {argEp = Rel, unArg = TyChar}],
TyChar,
TCon "List" [Arg {argEp = Rel, unArg = TyChar}]
]

Def pred ((Lam Rel (<n> (Case (((Var 0@0))) [
    Match (<(PatCon "Zeroi" [])> ((App (Var show) (Arg {argEp = Rel, unArg = DCon "Zeroi" []})))),
    Match (<(PatCon "Succi" [(PatVar nn,Rel)])> ((App (Var show) (Arg {argEp = Rel, unArg = Var 0@0}))))]))),

[Pi Rel (TCon "Nati" []) (<_2> TyChar), Lam
TCon "Nati" [], Case
TyChar, Case
TyChar, App
(Pi Rel (TCon "Nati" []) (<_1> TyChar)),
TCon "Nati" [],
TyChar,
(Pi Rel (TCon "Nati" []) (<_1> TyChar)),
TCon "Nati" []])]

Def main (Pos "pi/Translate.pi" (line 9, column 8) (App (Var head) (Arg {argEp = Rel, unArg = DCon "Cons" [Arg {argEp = Rel, unArg = Pos "pi/Translate.pi" (line 9, column 14) (LitChar 'a')},Arg {argEp = Rel, unArg = DCon "Cons" [Arg {argEp = Rel, unArg = Pos "pi/Translate.pi" (line 9, column 19) (LitChar 'b')},Arg {argEp = Rel, unArg = DCon "Nil" []}]}]})),[TyChar]),TypeSig (Sig {sigName = a, sigEp = Rel, sigType = Pos "pi/Translate.pi" (line 11, column 5) (Pi Rel TyChar (<_1> TCon "List" [Arg {argEp = Rel, unArg = TyChar}]))})
(DCon "Cons" [Arg {argEp = Rel, unArg = LitChar 'a'},Arg {argEp = Rel, unArg = DCon "Cons" [Arg {argEp = Rel, unArg = LitChar 'b'},Arg {argEp = Rel, unArg = DCon "Cons" [Arg {argEp = Rel, unArg = LitChar 'c'},Arg {argEp = Rel, unArg = DCon "Nil" []}]}]}]))),[Pi Rel TyChar (<_1> TCon "List" [Arg {argEp = Rel, unArg = TyChar}]),TCon "List" [Arg {argEp = Rel, unArg = TyChar}]])]
TypeSig (Sig {sigName = f, sigEp = Rel, sigType = Pos "pi/Translate.pi" (line 14, column 5) (Pi Rel (TCon "Maybe" [Arg {argEp = Rel, unArg = TyChar}]) (<_3> TyChar))}),
Def f (Pi Rel (TCon "Maybe" [Arg {argEp = Rel, unArg = TyChar}]) (<_3> TyChar),[Pi Rel (TCon "Maybe" [Arg {argEp = Rel, unArg = TyChar}]) (<_3> TyChar),TCon "Maybe" [Arg {argEp = Rel, unArg = TyChar}],TyChar])]


[Module {moduleName = "Translate", moduleImports = [], moduleEntries = [
TypeSig (Sig {sigName = map, sigEp = Rel, sigType = (Pi Rel ((Pi Rel TyChar (<_> TyChar))) (<_1> Pi Rel (TCon "List" [Arg {argEp = Rel, unArg = TyChar}]) (<_2> TCon "List" [Arg {argEp = Rel, unArg = TyChar}])))}),
RecDef map ((Lam Rel (<f> Lam Rel (<xs> (Case (((Var 0@0))) [
    Match (<(PatCon "Nil" [])>
        (DCon "Nil" []))),
    Match (<(PatCon "Cons" [(PatVar y,Rel),(PatVar ys,Rel)])>
        ((DCon "Cons" [Arg {argEp = Rel, unArg =  (App (Var 2@0) (Arg {argEp = Rel, unArg = Var 0@0}))},Arg {argEp = Rel, unArg = (App (App (Var map) (Arg {argEp = Rel, unArg = Var 2@0})) (Arg {argEp = Rel, unArg = Var 0@1}))}])))])))),

[]

[Module {moduleName = "Translate", moduleImports = [], moduleEntries = [
Data "Vec" (Telescope [TypeSig (Sig {sigName = A, sigEp = Rel, sigType = Type}), TypeSig (Sig {sigName = n, sigEp = Rel, sigType = (TCon "Nat" [])})])
    [ConstructorDef "Nil" (Telescope [Def n ((DCon "Zero" []),[])]),
     ConstructorDef "Cons" (Telescope [TypeSig (Sig {sigName = m, sigEp = Irr, sigType = (TCon "Nat" [])}),
                                       TypeSig (Sig {sigName = _, sigEp = Rel, sigType = (Var A)}),
                                       TypeSig (Sig {sigName = _1, sigEp = Rel, sigType = (TCon "Vec" [Arg {argEp = Rel, unArg = Var A},Arg {argEp = Rel, unArg = Var m}])}),
                                       Def n (DCon "Succ" [Arg {argEp = Rel, unArg = Var m}]),[])])]],


Data "Vec" (Telescope [TypeSig (Sig {sigName = A, sigEp = Rel, sigType = Type}),TypeSig (Sig {sigName = n, sigEp = Rel, sigType = (TCon "Nat" [])})])
    [ConstructorDef "Nil1" (Telescope []),
     ConstructorDef "Cons1" (Telescope [TypeSig (Sig {sigName = m, sigEp = Rel, sigType = (TCon "Nat" [])}),
                                        TypeSig (Sig {sigName = _, sigEp = Rel, sigType = (Var A)}),
                                        TypeSig (Sig {sigName = _1, sigEp = Rel, sigType = (TCon "Vec" [Arg {argEp = Rel, unArg = Var A},Arg {argEp = Rel, unArg = Var m}])})])]],

Data "List" (Telescope [TypeSig (Sig {sigName = c, sigEp = Rel, sigType = Type})]) [
    ConstructorDef "Nil" (Telescope []),
    ConstructorDef "Cons" (Telescope [TypeSig (Sig {sigName = d, sigEp = Rel, sigType = Var c}),
                                      TypeSig (Sig {sigName = e, sigEp = Rel, sigType = TCon "List" [Arg {argEp = Rel, unArg = Var c}]})])]



TypeSig (Sig {sigName = head, sigEp = Rel, sigType =
(Pi Irr (Type) (<A> (Pi Irr ((TCon "Nat" [])) (<n> (Pi Rel (TCon "Vec" [Arg {argEp = Rel, unArg = Var 1@0},Arg {argEp = Rel, unArg = (DCon "Succ" [Arg {argEp = Rel, unArg = Var 0@0}])}]) (<_2> Var 2@0))))))}),

Def head ((Lam Irr (<A> Lam Irr (<n> Lam Rel (<x> (Case (((Var 0@0))) [
    Match (<(PatCon "Cons1" [(PatVar m,Irr),(PatVar y,Rel),(PatVar ys,Rel)])> ((Var 0@1)))]))))),

[
Pi Irr (<A> (Pi Irr ((TCon "Nat" [])) (<n> (Pi Rel (TCon "Vec" [Arg {argEp = Rel, unArg = Var 1@0},Arg {argEp = Rel, unArg = (DCon "Succ" [Arg {argEp = Rel, unArg = Var 0@0}])}]) (<_2> Var 2@0))))),
Pi Irr ( (TCon "Nat" [])) (<n> (Pi Rel (TCon "Vec" [Arg {argEp = Rel, unArg = Var A9},Arg {argEp = Rel, unArg = (DCon "Succ" [Arg {argEp = Rel, unArg = Var 0@0}])}]) (<_2> Var A9))),
Pi Rel (TCon "Vec" [Arg {argEp = Rel, unArg = Var A9},Arg {argEp = Rel, unArg = (DCon "Succ" [Arg {argEp = Rel, unArg = Var n10}])}]) (<_2> Var A9),
TCon "Vec" [Arg {argEp = Rel, unArg = Var A9},Arg {argEp = Rel, unArg = (DCon "Succ" [Arg {argEp = Rel, unArg = Var n10}])}],
Var A9])],


Def m ((App
            (App
                (App
                (Var head)
                (Arg {argEp = Irr, unArg = TyChar}))
            (Arg {argEp = Irr, unArg = DCon "Zero" [])}))
      (Arg {argEp = Rel, unArg = (DCon "Cons1" [Arg {argEp = Irr, unArg = (DCon "Zero" [])},Arg {argEp = Rel, unArg = LitChar 'a'},Arg {argEp = Rel, unArg = DCon "Nil1" []}])})),

[TyChar, 1
(Pi Rel (TCon "Vec" [Arg {argEp = Rel, unArg = TyChar}, Arg {argEp = Rel, unArg = (DCon "Succ" [Arg {argEp = Rel, unArg = (DCon "Zero" [])}])}]) (<_2> TyChar)), 2
(Pi Irr ((TCon "Nat" [])) (<n> (Pi Rel (TCon "Vec" [Arg {argEp = Rel, unArg = TyChar},Arg {argEp = Rel, unArg = (DCon "Succ" [Arg {argEp = Rel, unArg = Var 0@0}])}]) (<_2> TyChar)))), 3
(Pi Irr (Type) (<A>  (Pi Irr ((TCon "Nat" [])) (<n> (Pi Rel (TCon "Vec" [Arg {argEp = Rel, unArg = Var 1@0},Arg {argEp = Rel, unArg = (DCon "Succ" [Arg {argEp = Rel, unArg = Var 0@0}])}]) (<_2> Var 2@0)))))), t3
Type, a3
TCon "Nat" [], a2
TCon "Vec" [Arg {argEp = Rel, unArg = TyChar},Arg {argEp = Rel, unArg = (DCon "Succ" [Arg {argEp = Rel, unArg = (DCon "Zero" [])}])}], a1
TCon "Nat" [],
TyChar,
TCon "Vec" [Arg {argEp = Rel, unArg = TyChar},Arg {argEp = Rel, unArg = (DCon "Zero" [])}]])]

[Arg {argEp = Rel, unArg = (DCon "Cons1" [Arg {argEp = Irr, unArg = (DCon "Zero" [])},Arg {argEp = Rel, unArg = LitChar 'a'},Arg {argEp = Rel, unArg = DCon "Nil1" []}])},
Arg {argEp = Irr, unArg = (DCon "Zero" [])},
Arg {argEp = Irr, unArg = TyChar}]

Def head (Pos "pi-tests/Translate.pi" (line 8, column 8) (Lam Irr (<A> Lam Irr (<n> Lam Rel (<x> Pos "pi-tests/Translate.pi" (line 8, column 21) (Case (Pos "pi-tests/Translate.pi" (line 8, column 26) (Pos "pi-tests/Translate.pi" (line 8, column 26) (Var 0@0))) [Match (<(PatCon "Cons1" [(PatVar m,Irr),(PatVar y,Rel),(PatVar ys,Rel)])> Pos "pi-tests/Translate.pi" (line 9, column 24) (Pos "pi-tests/Translate.pi" (line 9, column 24) (Var 0@1)))]))))),
[Pi Irr (Pos "pi-tests/Translate.pi" (line 7, column 12) Type) (<A> Pos "pi-tests/Translate.pi" (line 7, column 21) (Pi Irr (Pos "pi-tests/Translate.pi" (line 7, column 24) (TCon "Nat" [])) (<n> Pos "pi-tests/Translate.pi" (line 7, column 32) (Pi Rel (TCon "Vec" [Arg {argEp = Rel, unArg = Var 1@0},Arg {argEp = Rel, unArg = Pos "pi-tests/Translate.pi" (line 7, column 39) (DCon "Succ" [Arg {argEp = Rel, unArg = Var 0@0}])}]) (<_2> Var 2@0))))),Pi Irr (Pos "pi-tests/Translate.pi" (line 7, column 24) (TCon "Nat" [])) (<n> Pos "pi-tests/Translate.pi" (line 7, column 32) (Pi Rel (TCon "Vec" [Arg {argEp = Rel, unArg = Var A9},Arg {argEp = Rel, unArg = Pos "pi-tests/Translate.pi" (line 7, column 39) (DCon "Succ" [Arg {argEp = Rel, unArg = Var 0@0}])}]) (<_2> Var A9))),Pi Rel (TCon "Vec" [Arg {argEp = Rel, unArg = Var A9},Arg {argEp = Rel, unArg = Pos "pi-tests/Translate.pi" (line 7, column 39) (DCon "Succ" [Arg {argEp = Rel, unArg = Var n10}])}]) (<_2> Var A9),TCon "Vec" [Arg {argEp = Rel, unArg = Var A9},Arg {argEp = Rel, unArg = Pos "pi-tests/Translate.pi" (line 7, column 39) (DCon "Succ" [Arg {argEp = Rel, unArg = Var n10}])}],Var A9])

[Arg {argEp = Rel, unArg = (DCon "Cons1" [Arg {argEp = Irr, unArg = (DCon "Zero" [])},Arg {argEp = Rel, unArg = LitChar 'a'},Arg {argEp = Rel, unArg = DCon "Nil1" []}])},Arg {argEp = Irr, unArg = Pos "pi-tests/Translate.pi" (line 13, column 18) (DCon "Zero" [])},Arg {argEp = Irr, unArg = Pos "pi-tests/Translate.pi" (line 13, column 11) TyChar}]