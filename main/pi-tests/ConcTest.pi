module ConcTest where

import Concurrency
import IO
import Maybe
import ProofHelper


f2 : [id : Nat] -> Channel Char id -> IO Unit
f2 = \ [id] ch . bindEq [Maybe Char] [Unit] (receive [Char] [id] ch ) (\ ma .
                             (case ma of
                                Nothing -> returnIO [Unit] ()
                                Just a  -> print (Cons a Nil)
                             ))



main : IO Unit
main = case (isElem 0 Nil : Dec (Elem Nat 0 Nil)) of
        No prop p   -> 
            bindEq [Maybe ({newPid : PID 0 | List Nat})] [Unit] (spawn 0 <> p) ( \ mpid .
                case mpid of
                    Nothing         ->  returnIO [Unit] ()
                    Just pidAndSet  ->  
                        let (pid, pidSet) = pidAndSet in
                        case (isElem 0 <>) of
                            No prop cPf ->
                                (bindEq [Maybe ({ch : Channel Char 0 | List Nat})] [Unit] (link [Char] 0 <> cPf) ( \ msCh . 
                                    case msCh of
                                        Nothing  -> returnIO [Unit] ()
                                        Just sCh -> 
                                            let (ch, chidSet) = sCh in 
                                            case (isElem 0 pidSet) of
                                                Yes pf      -> (bindEq [Maybe ({returnedPid : PID 0 | List Nat})] [Unit] (run 0 pidSet (pf) (f2 [0] ch)) (\ mpid .
                                                                returnIO [Unit] ()))
                                                No prop cPf -> returnIO [Unit] ()
                                            )))
                                            
