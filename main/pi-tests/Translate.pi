module Translate where

data Void : Type where {}   -- no constructors

-- Not : Type -> Type
-- Not = \a . (a -> Void)

data Dec (a : Type) : Type where
  Yes of (prf : a)
  No  of (prop : Type) (cont : prop -> Void) [a=prop]

sym : [A:Type] -> [x:A] -> [y:A] -> (x = y) -> y = x
sym = \ [A] [x] [y] pf .
  subst Refl by pf

