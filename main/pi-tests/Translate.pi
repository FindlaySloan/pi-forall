module Translate where

data Vec (A : Type) (n : Nat) : Type where
  Nil1  of                       [n = Zero]
  Cons1 of [m:Nat] (A) (Vec A m) [n = Succ m]

head : [A :Type] -> [n:Nat] -> Vec A (Succ n) -> A
head = \ [A][n] x.  case x of
     Cons1 [m] y ys -> y
	  -- Nil case is impossible

m : Char
m = head [Char] [0] (Cons1 [0] 'a' Nil1)